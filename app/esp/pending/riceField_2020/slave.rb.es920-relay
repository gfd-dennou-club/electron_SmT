# coding: utf-8


#interval_time = 10
interval_time = ($GWNODENUM - $NODENUM)*($WAITTIME+$MARGINTIME)
#interval_time = 5
check = "chk"

#スレッド2
#受け取ったデータの処理
while true

# p "debug slave 1" 
 sleep 1 
  #最初の配列にデータがあれば処理開始
  if $data[0][0] != nil
    flag = true
    p "flag :#{flag} "
   # if($data[0][5] != nil && $data[0][0][4,8] != nil)
    if($data[0][1] != nil && $data[0][0] != nil)
	time = $data[0][1]

	rcvtime = time.split(":")
	p "rcvtime:#{rcvtime}"

	node = $data[0][0]
#	times = $data[0][1][10,2].to_i * 3600 + $data[0][1][13,2].to_i * 60 + $data[0][1][15,3].to_i
	times = rcvtime[0][-2,2].to_i*3600 + rcvtime[1].to_i*60 + rcvtime[2].to_i
#	p rcvtime[0][-2,2].to_i
#	p "slave time s:#{$rcvtime[0][-2,2]}:#{rcvtime[1]}:#{rcvtime[2]}"
	p "slave time : #{time}"
	p "slave times : #{times}"
	p "slave node : #{node}"
	p "node :#{$data[0][0]}"
    end	

    if time !=nil
	#インターバル時間中にデータを受け取るか
	#受け取ったらデータを破棄
	while
	 tt = $rtc.read

#	  p "rtc read"
	  t_how = sprintf("%02x:%02x:%02x",tt[4],tt[5],tt[6])
	  t_now = t_how[0,2].to_i * 3600 + t_how[3,2].to_i * 60 + t_how[6,2].to_i
	  t_delta = t_now - times

	  puts "slave t_how : #{t_how}"
	  puts "t_now : #{t_now}"
	  puts "t_delta : #{t_delta}"


	  #配列内を見て受け取ったデータと同じデータがあれば削除
	  #最初に受け取ったデータは消したくないため飛ばす
	  $data.each_with_index do |str,j|
#	    p "slave j : #{j}, str : #{str}"
	    if j == 0
		p "slave data :#{$data}"
		if($data[0][3].include?("#{$NODENUM}")||$sdata[0][3].include?("#{GWNODENUM}"))
			p "same data"
			$data.delete_at(0)
    			$data.push(nil)
			flag = false
			p "delete"
		  	if $i != 0
			  $i = $i - 1
		  	end

		  	if $i < 0
                          $i = 0
                  	end
		end

		next
	    end

	    p "str[0] :#{str[0]} "
	    p "str :#{str} "

	   # if str[0].include?("#{$NODENUM}")
	    if (str[0].include?("#{node}") )
		p "j = #{j}, data[j]:#{data[j]} "
	#	$data[j].delete_at(j)
		$data.delete_at(j)
		p "delete"
	#	  $data.push(Array.new() )
		  $data.push(nil)

		  p "slave after delete : #{$data}"

		  flag = false
		 # $i = $i-1

		  if $i != 0
			$i = $i - 1
		  end

		  if $i < 0
                        $i = 0
                  end
		  p "after j:#{j}"
		
		  next
	    end
=begin		
	    str.each do |elm|
	#	  p "slave elm : #{elm} "
		if elm.include?("#{node}")
		  #$data.delete_at(str)  #元は"delete()",delete_atで良いのか?

	#	  $data.push(Array.new() )
		  $data.push(nil)
		  p "slave after delete : #{$data}"
		  flag = false
                  p "flag :#{flag} "
		  $i = $i-1

		  if $i < 0
			$i = 0
		  end
		  next
		end
	    end
=end

	  end 

	  #インターバル時間経過したか
	  if t_delta > interval_time
	    p "interval times over"
	    break
	  end
	  sleep 2
	end
    end


#	p "slave debug 3"
	p "flag : #{flag} "

    #インターバル時間内に同じデータを受け取っていないときデータを送信
    if flag
	#受信データの末尾に自ノード番号を追加
	if $data[0][3]
	  $data[0][3] << "#{$NODENUM}"
	else
	  $data[0][3] = $NODENUM
	end

	p "send data"
	send_data = "Rc#{$data[0][0]},#{$data[0][1]},#{$data[0][2]},#{$data[0][3]},#{check},\r\n"
	p send_data
	$uart2.write_bytes(2,send_data)
	p $data	
    end

    #データを削除
    p "delete data"
    $data.delete_at(0)
   # $data.push(Array.new())
    $data.push(nil)

    if $i != 0
    	$i = $i -1
    end

    p $i
    p $data


    if $i < 0
	$i = 0
    end

    sleep 1
  else
    next
  end

end
