# coding: utf-8
#調査ノードプログラム
=begin
#LoRaモジュール設定
Node: coordinaor
Band with: 125kHz
Spreading Factor: 7
Effective Bitrate:5469bps
channel : 1
PAN ID: 0001
own Node ID: 2010
Destination ID: FFFF
Acknowledge: on
Retry count: 3
Transfer Mode: payload
Receive Node ID information: ON
RSSI information: ON
config/operation: operation
UART baudrate: 115200
sleep Mode: No sleep
sleep Time: 50
output power: 13dBm
Format: ASCII
send time: 0
send Data: 

=end

NODENUM = "H"
GWNODENUM = 7

#uart初期化
$uart2 = UART.new(2,115200)
$uart2.config(2,115200)
$uart2.set_pin(2)
$uart2.driver_install(2)

#i2c 初期化
i2c = I2C.new(0,22,21)
i2c.driver_install

#LCD初期化
lcd = AQM0802A.new(i2c)
lcd.setup

rtc = RC8035SA.new(i2c)

#スレッド1
while true
   begin
	#データを受け取る
	#chompで末尾の"\r\n"を削除
	line = $uart2.read_bytes(2).chomp
#	p "master debug 1"

	  sleep 1


#=begin
	if line == "" 
	 # p "line is no data : #{line}"
	  #sleep 1
	  redo
	end
#=end

#p "master debug 2"

	if( line.include?("Rc")==true && line.include?("chk")==true) ##

	puts "receive data : "
	p line
        rssi = line[0,4]
	node = line[10,2]
	p rssi
 	p node	

	#受信したデータの処理
	rcvdata = line.split(",")

	#ノイズを削除する	
	while (rcvdata[-1].include?("chk") != true)
	  p "data[-1] : #{rcvdata[-1]}"
	  rcvdata.pop
	end
	rcvdata.pop

	puts "rcvdata : "
	p rcvdata

	tt = rtc.read
	rcvtime = sprintf("%02x:%02x:%02x",tt[4],tt[5],tt[6])
	p rcvtime

	prevnode = rcvdata[5]
	puts "prevnode : "
	p prevnode

p "master debug 2"

	tmpline = rcvdata.join(',')
	
	
		p "rssi : #{rssi} dBm"
		p "receive node:#{node}"

		p "data : #{tmpline}"
	
		lcd.cursor(0,0)	
		lcd.write_string(sprintf("%s,%s",node,rssi))
		lcd.cursor(0,1)
		lcd.write_string(sprintf("%s",rcvtime))
		sleep(5)

	else

		tt = rtc.read
		rcvtime = sprintf("%02x:%02x:%02x",tt[4],tt[5],tt[6])
		lcd.cursor(0,0)
                lcd.write_string("no data")
                lcd.cursor(0,1)
                lcd.write_string(sprintf("%s",rcvtime))
                sleep(1)
		
	end ## 

   rescue EOFError
	next
   end

end

