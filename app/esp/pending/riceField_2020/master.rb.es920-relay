# coding: utf-8
#中継ノードプログラム
=begin
#LoRaモジュール設定
Node: coordinaor
Band with: 125kHz
Spreading Factor: 7
Effective Bitrate:5469bps
channel : 1
PAN ID: 0001
own Node ID: 2008
Destination ID: FFFF
Acknowledge: on
Retry count: 3
Transfer Mode: payload
Receive Node ID information: OFF
RSSI information: ON
config/operation: operation
UART baudrate: 115200
sleep Mode: No sleep
sleep Time: 50
output power: 13dBm
Format: ASCII
send time: 0
send Data: 

=end

$NODENUM = 1 #node:2004
#$NODENUM = 2 #node:2005
#$NODENUM = 3 #node:2006
#$NODENUM = 4 #node:2007
#$NODENUM = 5 #node:2008
#$NODENUM = 6 #node:2009

$GWNODENUM = 7
$WAITTIME = 0.154
$MARGINTIME = 10

#uart
$uart2 = UART.new(2,115200)
$uart2.config(2,115200)
$uart2.set_pin(2)
$uart2.driver_install(2)

#i2c
i2c = I2C.new(0,22,21)
i2c.driver_install

#rtc
$rtc = RC8035SA.new(i2c)

$data = Array.new(10){Array.new()}
$i = 0

#スレッド1
while true
   begin
	if $i<0
		$i=0
	end

	#データを受け取る
	#chompで末尾の"\r\n"を削除
	line = $uart2.read_bytes(2).chomp
#	p "master debug 1"

	  sleep 1


#=begin
	if line == "" ||line == nil
	 # p "line is no data : #{line}"
	  #sleep 1
	  redo
	end
#=end

#p "master debug 2"

#	if( line != "" && line.include?("Rc")==true) ##
	if( line.include?("Rc")==true && line.include?("chk")==true) ##

	puts "receive data : "
	p line

#	rssi = line[0,4]
	rssi = line[2,2]
	p rssi

	#受信したデータの処理

	rcvdata = line.split(",")

	#ノイズを削除する	
	while (rcvdata[-1].include?("chk") != true)
	  p "data[-1] : #{rcvdata[-1]}"
	  rcvdata.pop
	end
	rcvdata.pop

	puts "rcvdata : "
	p rcvdata
#	prevnode = $array[5]
	prevnode = rcvdata[3]
	puts "prevnode : "
	p prevnode

p "master debug 2"

	tmpline = rcvdata.join(',')
	
	#prevnodeに自ノード,ゲートウェイノードが含まれていたら破棄
	unless(prevnode.include?("#{$NODENUM}") == true ||prevnode.include?("#{$GWNODENUM}") == true)
		$data[$i] = tmpline.split(",")
	
		#受け取った時の時間を格納
		tt = $rtc.read
		$data[$i][6] = sprintf("20%02x-%02x-%02x %02x:%02x:%02x",tt[0],tt[1],tt[2],tt[4],tt[5],tt[6]);

		p "#{$data[$i][0][0,4]} = rssi : #{rssi} dBm"

		$data[$i][2] << "#{rssi}:"
		$data[$i][0] = $data[$i][0][6,4]
		p "data : #{$data}"
		p "data[#{$i}] : #{$data[$i]}"
	#	p "data[#{$i}][6] : #{$data[$i][6]}"
	#	p "data[#{$i}][0] : #{$data[$i][0]}"

		if $i<0
                  $i=0
	        end

		$i = $i + 1
		p "i=#{$i}"


#p "master debug 3"
	else
		p "破棄"	
	end

	end ## 

   rescue EOFError
	next
   end

  #sleep 2
end

